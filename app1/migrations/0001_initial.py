# Generated by Django 5.0.1 on 2024-05-15 09:57

import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asset_id', models.IntegerField(unique=True)),
                ('asset_name', models.CharField(max_length=255)),
                ('tag_id', models.IntegerField(unique=True)),
                ('footage', models.ImageField(blank=True, null=True, upload_to='assets_footage/', verbose_name='Footage')),
                ('description', models.CharField(max_length=500)),
                ('asset_category', models.CharField(max_length=50)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], max_length=50)),
                ('location', models.CharField(max_length=100)),
                ('time_log', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='check_changes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('timestamp', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='company',
            fields=[
                ('sr', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('works', models.CharField(max_length=100)),
                ('safety_insurance', models.FileField(upload_to='attachments/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'doc', 'docx', 'jpeg', 'jpg'])])),
                ('insurance_expiry', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('sr', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('subject', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=1000)),
                ('username', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Orientation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attachments', models.FileField(upload_to='attachments/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'doc', 'docx', 'jpeg', 'jpg'])])),
            ],
        ),
        migrations.CreateModel(
            name='sign_up',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Site_management',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link_field', models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name='timeschedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.CharField(max_length=100)),
                ('active_time', models.CharField(max_length=50)),
                ('inactive_time', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Turnstile_S',
            fields=[
                ('sr_no', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('turnstile_id', models.IntegerField(unique=True)),
                ('location', models.CharField(max_length=100)),
                ('safety_confirmation', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Upload_data',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uploaded_file', models.FileField(upload_to='uploads/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'doc', 'docx', 'jpeg', 'jpg'])])),
            ],
        ),
        migrations.CreateModel(
            name='Upload_File',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uploaded_file', models.FileField(upload_to='uploads/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'doc', 'docx', 'jpeg', 'jpg'])])),
            ],
        ),
        migrations.CreateModel(
            name='UserEnrolled',
            fields=[
                ('sr', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('company_name', models.CharField(max_length=100)),
                ('job_role', models.CharField(choices=[('role1', 'Role 1'), ('role2', 'Role 2')], max_length=100)),
                ('mycompany_id', models.CharField(max_length=10)),
                ('tag_id', models.IntegerField()),
                ('job_location', models.CharField(max_length=100)),
                ('orientation', models.FileField(blank=True, null=True, upload_to='attachments/', validators=[django.core.validators.FileExtensionValidator(['jpeg', 'jpg'])])),
                ('facial_data', models.ImageField(blank=True, null=True, upload_to='facial_data/', verbose_name='Facial Data')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], max_length=10)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=50, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
